swagger: "2.0"

info:
  title: Blog API
  version: 1.0

schemes: ["http", "https"]

paths:
  # Signup
  /api/signup:
    post:
      summary: Sign up
      description: Registeration for new users
      consumes:
        - multipart/form-part
      parameters:
        - name: username
          in: formData
          required: true
        - name: email
          in: formData
          required: true
        - name: image
          in: formData
          required: true
          type: file
        - name: password
          in: formData
          required: true
        - name: confirmationpassword
          in: formData
          required: true
      responses:
        200:
          description: Successful operation
        400:
          description: Bad request
        401:
          description: User doesn't exist

  # Login
  /api/login:
    post:
      summary: Login
      description: Login user
      parameters:
        - name: email
          in: formData
          required: true
        - name: password
          in: formData
          required: true
      responses:
        200:
          description: Successful operation
        400:
          description: Bad request
        401:
          description: User doesn't exist

  # Create a new post
  /api/posts:
    post:
      summary: Create a post
      description: Create a new post
      security:
        - bearerAuth: []
      parameters:
        - name: authorization
          in: header
          required: true
        - name: post
          in: body
          required: true
          schema:
            $ref: "#/components/schemas/Post"
      responses:
        200:
          description: Successful operation
        400:
          description: Bad request
        401:
          description: Post doesn't exist

    # Get all posts
    get:
      summary: Get all posts
      description: Returns all posts
      security:
        - bearerAuth: []
      parameters:
        - name: authorization
          in: header
          required: true
      responses:
        200:
          description: Successful operation
        400:
          description: Bad request
        401:
          description: Post doesn't exist

  # Update a post by uuid
  /api/posts/{uuid}:
    put:
      summary: Update a post by uuid
      description: Edit a post
      security:
        - bearerAuth: []
      parameters:
        - name: authorization
          in: header
          required: true
        - name: uuid
          in: path
          required: true
        - name: post
          in: body
          required: true
          schema:
            $ref: "#/components/schemas/Post"
      responses:
        200:
          description: Successful operation
        400:
          description: Bad request
        401:
          description: Post doesn't exist

    # Delete a post by uuid
    delete:
      summary: Delete a post by uuid
      description: Delete a post
      security:
        - bearerAuth: []
      parameters:
        - name: authorization
          in: header
          required: true
        - name: uuid
          in: path
          required: true
      responses:
        200:
          description: Successful operation
        204:
          description: Everything is good, nothing to return
        400:
          description: Bad request
        401:
          description: Post doesn't exist

  # Create a comment
  /api/{uuid}/comments:
    post:
      summary: Create a comment
      description: Create a new comment
      security:
        - bearerAuth: []
      parameters:
        - name: authorization
          in: header
          required: true
        - name: uuid
          in: path
        - name: comments
          in: body
          required: true
          schema:
            $ref: "#/components/schemas/Comment"
      responses:
        200:
          description: Successful operation
        201:
          description: Successful operation
        400:
          description: Bad request
        401:
          description: Post doesn't exist

    # Get all comments based on postUuid
    get:
      summary: Get all comments based on postUuid
      description: Create a new comment
      security:
        - bearerAuth: []
      parameters:
        - name: authorization
          in: header
          required: true
        - name: uuid
          in: path
      responses:
        200:
          description: Successful operation
        201:
          description: Successful operation
        400:
          description: Bad request
        401:
          description: Post doesn't exist

components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
  schemas:
    # Post schema
    Post:
      type: object
      example:
        {
          "title": "post title",
          "content": "Sint quaerat beatae voluptas repellat veniam sint.",
          "userUuid": "8f82f0e2-b57a-4e04-878c-deeb5edd9b61",
        }
      properties:
        title:
          type: string
        content:
          type: string
        userUuid:
          type: string

    # Comment Schema
    Comment:
      type: object
      example:
        {
          "content": "Sint quaerat beatae voluptas repellat veniam sint.",
          "userUuid": "8f82f0e2-b57a-4e04-878c-deeb5edd9b61",
        }
      properties:
        content:
          type: string
        userUuid:
          type: string
